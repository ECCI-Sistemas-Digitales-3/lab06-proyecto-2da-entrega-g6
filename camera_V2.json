[
    {
        "id": "939cfdcfb994e79c",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "41729beb6032c6e8",
        "type": "ui_button",
        "z": "939cfdcfb994e79c",
        "name": "Tomar Foto",
        "group": "4d4d4d4d4d4d4d4d",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Tomar Foto",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 90,
        "y": 40,
        "wires": [
            [
                "bff893d122cb69d5"
            ]
        ]
    },
    {
        "id": "4b254b4a89a8af7c",
        "type": "ui_template",
        "z": "939cfdcfb994e79c",
        "group": "4d4d4d4d4d4d4d4d",
        "name": "Mostrar Imagen",
        "order": 2,
        "width": "6",
        "height": "5",
        "format": "<div style=\"width: 100%; overflow: auto; max-height: 80vh;\">\n    <canvas id=\"canvas\" style=\"display: block; width: 100%; height: auto;\"></canvas>\n</div>\n<p id=\"colorInfo\" style=\"color: white; font-weight: bold;\"></p>\n\n<script>\n    (function(scope) {\n        scope.$watch('msg.payload', function(payload) {\n            // Verificar si el payload es una cadena base64 con imagen\n            if (typeof payload !== 'string' || !payload.startsWith(\"data:image\")) return;\n\n            const canvas = document.getElementById(\"canvas\");\n            const ctx = canvas.getContext(\"2d\");\n            const img = new Image();\n\n            img.onload = function () {\n                // Calcular la proporción de la imagen\n                const aspectRatio = img.width / img.height;\n\n                // Tamaño máximo del canvas (ajustable)\n                const maxWidth = 1000;  // Máximo ancho para el canvas\n                const maxHeight = 800;  // Máxima altura para el canvas\n\n                // Ajustar tamaño del canvas\n                let canvasWidth = img.width;\n                let canvasHeight = img.height;\n\n                // Si la imagen es más ancha que el máximo permitido\n                if (img.width > maxWidth) {\n                    canvasWidth = maxWidth;\n                    canvasHeight = maxWidth / aspectRatio;\n                }\n\n                // Si la imagen es más alta que el máximo permitido\n                if (canvasHeight > maxHeight) {\n                    canvasHeight = maxHeight;\n                    canvasWidth = maxHeight * aspectRatio;\n                }\n\n                // Establecer el tamaño final del canvas\n                canvas.width = canvasWidth;\n                canvas.height = canvasHeight;\n\n                // Dibujar la imagen en el canvas\n                ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n                // Manejar el clic para obtener el color\n                canvas.onclick = function(evt) {\n                    const rect = canvas.getBoundingClientRect();\n                    const scaleX = canvas.width / rect.width;\n                    const scaleY = canvas.height / rect.height;\n\n                    const x = Math.floor((evt.clientX - rect.left) * scaleX);\n                    const y = Math.floor((evt.clientY - rect.top) * scaleY);\n\n                    const pixel = ctx.getImageData(x, y, 1, 1).data;\n                    const rgb = {\n                        r: pixel[0],\n                        g: pixel[1],\n                        b: pixel[2]\n                    };\n\n                    document.getElementById(\"colorInfo\").innerText = `RGB(${rgb.r}, ${rgb.g}, ${rgb.b})`;\n                    scope.send({ payload: { x, y, color: rgb } });\n                };\n            };\n\n            img.src = payload; // Establecer la fuente de la imagen (base64)\n        });\n    })(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 360,
        "y": 240,
        "wires": [
            [
                "79b11fe80314491c"
            ]
        ]
    },
    {
        "id": "c7a1fa3527730992",
        "type": "exec",
        "z": "939cfdcfb994e79c",
        "command": "libcamera-still -o /home/Laura/foto.jpg",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": true,
        "oldrc": false,
        "name": "",
        "x": 630,
        "y": 60,
        "wires": [
            [],
            [
                "176b8bae02835e8f"
            ],
            []
        ]
    },
    {
        "id": "176b8bae02835e8f",
        "type": "file in",
        "z": "939cfdcfb994e79c",
        "name": "",
        "filename": "/home/Laura/foto.jpg",
        "filenameType": "str",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 180,
        "y": 160,
        "wires": [
            [
                "822216f57d7048b8",
                "8f3ed110147f497b"
            ]
        ]
    },
    {
        "id": "79b11fe80314491c",
        "type": "function",
        "z": "939cfdcfb994e79c",
        "name": "formato rgb",
        "func": "let r = msg.payload.color.r;\nlet g = msg.payload.color.g;\nlet b = msg.payload.color.b;\n\nif (\n    Number.isInteger(r) && r >= 0 && r <= 255 &&\n    Number.isInteger(g) && g >= 0 && g <= 255 &&\n    Number.isInteger(b) && b >= 0 && b <= 255\n) {\n    let hex = `#${((1 << 24) | (r << 16) | (g << 8) | b).toString(16).slice(1).toUpperCase()}`;\n    msg.payload = hex;\n} else {\n    msg.payload = \"Valores fuera de rango (0-255)\";\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 240,
        "wires": [
            [
                "cb195f94d8b1919e"
            ]
        ]
    },
    {
        "id": "8f3ed110147f497b",
        "type": "function",
        "z": "939cfdcfb994e79c",
        "name": "imagen_formato_base64",
        "func": "let file = msg.payload;\nlet mime = msg.file && msg.file.mimetype ? msg.file.mimetype : \"image/jpeg\";\n\nlet base64str = `data:${mime};base64,${file.toString('base64')}`;\n\nflow.set(\"imagen_base64\", base64str);\nreturn { payload: base64str };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 240,
        "wires": [
            [
                "4b254b4a89a8af7c"
            ]
        ]
    },
    {
        "id": "ce83121bc8f8df11",
        "type": "ui_button",
        "z": "939cfdcfb994e79c",
        "name": "",
        "group": "4d4d4d4d4d4d4d4d",
        "order": 0,
        "width": "0",
        "height": "0",
        "passthru": false,
        "label": "Enviar color",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 170,
        "y": 320,
        "wires": [
            [
                "fae8bdf529c5a2e9"
            ]
        ]
    },
    {
        "id": "fae8bdf529c5a2e9",
        "type": "function",
        "z": "939cfdcfb994e79c",
        "name": "function 6",
        "func": "let rgb=msg.payload.match(/\\d+/g);\nif (rgb && rgb.length === 3){\n    let r = rgb [0];\n    let g = rgb [1];\n    let b = rgb [2];\n    msg.payload = `R: ${r},G:${g},B:${b}`; \n}\nelse{\n    msg.payload = \"Color invalido\";\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 320,
        "wires": [
            [
                "0e7af2061021c323"
            ]
        ]
    },
    {
        "id": "0e7af2061021c323",
        "type": "file",
        "z": "939cfdcfb994e79c",
        "name": "",
        "filename": "/home/Laura/Color.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 540,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "cb195f94d8b1919e",
        "type": "ui_template",
        "z": "939cfdcfb994e79c",
        "group": "4d4d4d4d4d4d4d4d",
        "name": "cuadro rgb",
        "order": 4,
        "width": "2",
        "height": "2",
        "format": "<div style=\"width: 100%; height: 100%; background-color: {{msg.payload}};\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 710,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "bff893d122cb69d5",
        "type": "function",
        "z": "939cfdcfb994e79c",
        "name": "function 2",
        "func": "msg.payload = \"Cargando foto...\"; // Texto a mostrar\nmsg.enabled = true; // Opcional: asegura que el widget esté habilitado\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 40,
        "wires": [
            [
                "c7c58babc1f8a0ac",
                "c7a1fa3527730992"
            ]
        ]
    },
    {
        "id": "c7c58babc1f8a0ac",
        "type": "ui_text_input",
        "z": "939cfdcfb994e79c",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "4d4d4d4d4d4d4d4d",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 380,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "822216f57d7048b8",
        "type": "function",
        "z": "939cfdcfb994e79c",
        "name": "function 5",
        "func": "// Envía un mensaje vacío o un espacio para \"limpiar\" el texto\nmsg.payload = \"\"; \n// Opcional: si quieres ocultar completamente el widget, puedes usar:\n// msg.enabled = false; // Requiere que el ui_text tenga una configuración para esto.\n// O simplemente puedes dejar msg.payload vacío para que no muestre nada.\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 160,
        "wires": [
            [
                "c7c58babc1f8a0ac"
            ]
        ]
    },
    {
        "id": "4d4d4d4d4d4d4d4d",
        "type": "ui_group",
        "name": "Cámara",
        "tab": "5e5e5e5e5e5e5e5e",
        "order": 1,
        "disp": true,
        "width": 6
    },
    {
        "id": "5e5e5e5e5e5e5e5e",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "camera",
        "order": 1
    }
]